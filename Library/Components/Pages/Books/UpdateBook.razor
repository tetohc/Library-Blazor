<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="@book" Class="pa-4">
            <MudText Typo="Typo.h6">Crear Libro</MudText>
            <MudTextField @bind-Value="book.Title" Label="Título" Required="true" />
            <MudTextField @bind-Value="book.Code" Label="Código" Required="true" />
            <MudDatePicker Label="Fecha de publicación" @bind-Date="_date" />
            <MudNumericField @bind-Value="book.Quantity" Label="Cantidad" Required="true" Min="1" />
            <MudSelect T="Guid" @bind-Value="book.CategoryId" Label="Categoría" Required="true">
                @foreach (var category in categories)
                {
                    <MudSelectItem T="Guid" Value="@category.Id">@category.Name</MudSelectItem>
                }
            </MudSelect>
            <MudButton OnClick="@Save" Variant="Variant.Filled" Color="Color.Primary" Class="mt-5">
                <MudIcon Icon="@Icons.Material.Filled.Save" />
                Guardar
            </MudButton>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public Guid Id { get; set; }
    private Book book = new();
    private List<Category> categories = new();
    private MudForm form = null!;
    private DateTime? _date = DateTime.Today;

    [Inject] private IRepository<Book> repository { get; set; } = null!;
    [Inject] private IRepository<Category> categoryRepository { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            book = await repository.GetByIdAsync(Id);
            categories = (await categoryRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ocurrió un error al cargar el libro: {ex.Message}", Severity.Error);
            MudDialog.Cancel();
        }
    }

    private async Task Save()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                book.ReleaseDate = (DateTime)_date;
                await repository.UpdateAsync(book);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Ocurrió un error al guardar el libro actualizado: {ex.Message}", Severity.Error);
            }
        }
    }
}
